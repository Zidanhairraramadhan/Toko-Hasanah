document.addEventListener('DOMContentLoaded', function() {
    // ==================== STATE APLIKASI ====================
    let allProducts = [];
    let cart = []; // Keranjang belanja
    const API_URL = '/api/products';

    // ==================== SELEKSI ELEMEN DOM ====================
    const productsGrid = document.getElementById('productsGrid');
    const searchInput = document.getElementById('searchInput');
    const categoryFilter = document.getElementById('categoryFilter');
    const cartCount = document.querySelector('.cart-count');
    const orderForm = document.getElementById('orderForm');
    const orderItemsTextarea = document.getElementById('orderItems');
    const orderTotalInput = document.getElementById('orderTotal');

    // ==================== FUNGSI-FUNGSI UTAMA ====================

    // Fungsi untuk membuat elemen HTML setiap produk (DIPERBARUI DENGAN PEMILIH KUANTITAS)
    function createProductElement(product) {
        const productDiv = document.createElement('div');
        productDiv.className = 'product';
        const priceHTML = product.discount ? `<s>Rp${product.discount.toLocaleString('id-ID')}</s> <h3 class="product-price-final">Rp${product.price.toLocaleString('id-ID')}</h3>` : `<h3 class="product-price-final">Rp${product.price.toLocaleString('id-ID')}</h3>`;
        const imageSrc = product.image ? `/${product.image}` : 'images/default.png';
        const ratingHTML = createRatingStars(product.rating);

        productDiv.innerHTML = `
            <div class="product-header">
                <img src="${imageSrc}" alt="${product.name}" loading="lazy">
            </div>
            <div class="product-footer">
                <p class="product-category">${product.category || 'Tanpa Kategori'}</p>
                <h3 class="product-name">${product.name}</h3>
                ${ratingHTML}
                <div class="product-price">${priceHTML}</div>
                <p>Stok: ${product.stock}</p>
            </div>
            <div class="product-actions">
                <div class="quantity-selector">
                    <button class="quantity-btn quantity-minus" data-id="${product.id}" aria-label="Kurangi jumlah">-</button>
                    <input type="number" class="product-quantity-input" value="1" min="1" max="${product.stock}" data-id="${product.id}" aria-label="Jumlah produk">
                    <button class="quantity-btn quantity-plus" data-id="${product.id}" aria-label="Tambah jumlah">+</button>
                </div>
                <button class="btn add-to-cart-btn" data-id="${product.id}" ${product.stock <= 0 ? 'disabled' : ''}>
                    ${product.stock > 0 ? 'Tambah ke Keranjang' : 'Stok Habis'}
                </button>
            </div>`;
        return productDiv;
    }

    // === LOGIKA KERANJANG BELANJA (DIPERBARUI) ===
    function addToCart(productId, quantity) {
        const productToAdd = allProducts.find(p => p.id === productId);
        if (!productToAdd || productToAdd.stock <= 0) {
            alert('Stok produk habis!');
            return;
        }

        const existingItem = cart.find(item => item.id === productId);
        if (existingItem) {
            existingItem.quantity += quantity;
        } else {
            cart.push({ ...productToAdd, quantity: quantity });
        }
        updateCartCounter();
        updateOrderForm();
    }

    function updateCartCounter() {
        const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
        if(cartCount) cartCount.textContent = totalItems;
    }

    // FUNGSI BARU UNTUK MENGUBAH KUANTITAS DI KARTU PRODUK
    function updateQuantityOnCard(productId, change) {
        const quantityInput = document.querySelector(`.product-quantity-input[data-id='${productId}']`);
        if (!quantityInput) return;

        let currentValue = parseInt(quantityInput.value);
        let newValue = currentValue + change;

        // Batasi agar tidak kurang dari 1 dan tidak lebih dari stok
        if (newValue < 1) newValue = 1;
        const maxStock = parseInt(quantityInput.max);
        if (newValue > maxStock) {
            newValue = maxStock;
            alert('Jumlah melebihi stok yang tersedia.');
        }
        
        quantityInput.value = newValue;
    }


    // === EVENT LISTENERS (DIPERBARUI) ===
    if (productsGrid) {
        productsGrid.addEventListener('click', (e) => {
            const target = e.target;
            const productId = parseInt(target.dataset.id);

            // Jika tombol + diklik
            if (target.classList.contains('quantity-plus')) {
                updateQuantityOnCard(productId, 1);
            }
            // Jika tombol - diklik
            else if (target.classList.contains('quantity-minus')) {
                updateQuantityOnCard(productId, -1);
            }
            // Jika tombol "Tambah ke Keranjang" diklik
            else if (target.classList.contains('add-to-cart-btn')) {
                const quantityInput = document.querySelector(`.product-quantity-input[data-id='${productId}']`);
                const quantity = parseInt(quantityInput.value);
                addToCart(productId, quantity);
                alert(`${quantity} ${quantityInput.closest('.product').querySelector('.product-name').textContent} ditambahkan ke keranjang!`);
            }
        });
    }

    // ... (Sisa kode seperti `init`, `renderProducts`, `filter`, `form whatsapp` tidak berubah) ...
    // Saya akan sertakan lagi di bawah ini agar lengkap

    function renderProducts(products) {
        if (!productsGrid) return;
        productsGrid.innerHTML = '';
        if (products.length === 0) {
            productsGrid.innerHTML = `<p class="no-products" style="grid-column: 1 / -1; text-align: center;">Produk tidak ditemukan.</p>`;
            return;
        }
        products.forEach(product => { productsGrid.appendChild(createProductElement(product)); });
    }
    
    function createRatingStars(rating) {
        if (!rating || rating <= 0) return '<div class="rating" style="min-height: 1.2em;"></div>';
        let starsHTML = '<div class="rating">';
        const fullStars = Math.floor(rating);
        const halfStar = rating % 1 >= 0.5;
        const emptyStars = 5 - fullStars - (halfStar ? 1 : 0);
        for (let i = 0; i < fullStars; i++) starsHTML += '<i class="fas fa-star"></i>';
        if (halfStar) starsHTML += '<i class="fas fa-star-half-alt"></i>';
        for (let i = 0; i < emptyStars; i++) starsHTML += '<i class="far fa-star"></i>';
        starsHTML += '</div>';
        return starsHTML;
    }
    
    function updateOrderForm() {
        if (!orderItemsTextarea || !orderTotalInput) return;
        const itemsText = cart.map(item => `- ${item.name} (x${item.quantity})`).join('\n');
        const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        orderItemsTextarea.value = itemsText;
        orderTotalInput.value = `Rp ${total.toLocaleString('id-ID')}`;
    }

    function handleOrderSubmit(e) {
        e.preventDefault();
        const name = document.getElementById('customerName').value;
        const phone = document.getElementById('customerPhone').value;
        const address = document.getElementById('customerAddress').value;
        if (cart.length === 0) { alert('Keranjang Anda kosong.'); return; }
        const items = orderItemsTextarea.value;
        const total = orderTotalInput.value;
        const adminPhone = '6289631269504';
        const message = `Halo SembakoModern, saya ingin memesan:\n\n*Pesanan:*\n${items}\n\n*Total: ${total}*\n\n*Data Pemesan:*\nNama: ${name}\nNo. HP/WA: ${phone}\nAlamat Pengiriman: ${address}\n\nTerima kasih.`;
        const whatsappURL = `https://wa.me/${adminPhone}?text=${encodeURIComponent(message)}`;
        window.open(whatsappURL, '_blank');
    }
    
    if (orderForm) orderForm.addEventListener('submit', handleOrderSubmit);
    
    function populateFilter() {
        const categories = [...new Set(allProducts.map(p => p.category).filter(Boolean))];
        if (categoryFilter) {
            categoryFilter.innerHTML = '<option value="all">Semua Kategori</option>';
            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = category;
                categoryFilter.appendChild(option);
            });
        }
    }

    function filterAndRender() {
        let filtered = [...allProducts];
        if(searchInput) {
            const searchTerm = searchInput.value.toLowerCase();
            if (searchTerm) filtered = filtered.filter(p => p.name.toLowerCase().includes(searchTerm));
        }
        if(categoryFilter) {
            const selectedCategory = categoryFilter.value;
            if (selectedCategory !== 'all') filtered = filtered.filter(p => p.category === selectedCategory);
        }
        renderProducts(filtered);
    }
    
    if (searchInput) searchInput.addEventListener('input', filterAndRender);
    if (categoryFilter) categoryFilter.addEventListener('change', filterAndRender);

    async function init() {
        if (productsGrid) {
            try {
                const response = await fetch(API_URL);
                if (!response.ok) throw new Error('Server tidak merespon.');
                allProducts = await response.json();
                populateFilter();
                renderProducts(allProducts);
            } catch (error) {
                productsGrid.innerHTML = `<p style="color: red; grid-column: 1 / -1; text-align: center;">Gagal memuat produk. Pastikan server backend berjalan.</p>`;
            }
        }
    }
    
    init();
});