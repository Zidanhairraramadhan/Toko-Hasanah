document.addEventListener('DOMContentLoaded', function() {
    // ==================== STATE APLIKASI ====================
    let allProducts = [];
    let cart = []; // Keranjang belanja
    const API_URL = '/api/products';
    const SERVER_URL = ''; // URL server kosong karena sudah satu origin

    // ==================== SELEKSI ELEMEN DOM ====================
    const productsGrid = document.getElementById('productsGrid');
    const searchInput = document.getElementById('searchInput');
    const categoryFilter = document.getElementById('categoryFilter');
    const cartBtn = document.getElementById('cart-btn');
    const cartCount = document.querySelector('.cart-count');
    const cartModalOverlay = document.getElementById('cart-modal-overlay');
    const closeCartBtn = document.getElementById('close-cart-btn');
    const cartItemsContainer = document.getElementById('cart-items-container');
    const cartTotalPriceEl = document.getElementById('cart-total-price');
    const checkoutBtn = document.getElementById('checkout-btn');
    const orderForm = document.getElementById('orderForm');
    const orderItemsTextarea = document.getElementById('orderItems');
    const orderTotalInput = document.getElementById('orderTotal');

    // ==================== FUNGSI-FUNGSI UTAMA ====================

    // Fungsi untuk membuat elemen HTML setiap produk
    function createProductElement(product) {
        const productDiv = document.createElement('div');
        productDiv.className = 'product';
        const priceHTML = product.discount ? `<s>Rp${product.discount.toLocaleString('id-ID')}</s> <h3 class="product-price-final">Rp${product.price.toLocaleString('id-ID')}</h3>` : `<h3 class="product-price-final">Rp${product.price.toLocaleString('id-ID')}</h3>`;
        const imageSrc = product.image ? `${SERVER_URL}/${product.image}` : 'images/default.png';
        
        productDiv.innerHTML = `
            <div class="product-header">
                <img src="${imageSrc}" alt="${product.name}" loading="lazy">
            </div>
            <div class="product-footer">
                <p class="product-category">${product.category || 'Tanpa Kategori'}</p>
                <h3 class="product-name">${product.name}</h3>
                <div class="product-price">${priceHTML}</div>
                <p>Stok: ${product.stock}</p>
            </div>
            <button class="btn add-to-cart-btn" data-id="${product.id}" ${product.stock <= 0 ? 'disabled' : ''}>
                ${product.stock > 0 ? 'Tambah ke Keranjang' : 'Stok Habis'}
            </button>`;
        return productDiv;
    }

    // Fungsi untuk menampilkan produk ke dalam grid
    function renderProducts(products) {
        productsGrid.innerHTML = '';
        if (products.length === 0) {
            productsGrid.innerHTML = `<p class="no-products" style="grid-column: 1 / -1; text-align: center;">Produk tidak ditemukan.</p>`;
            return;
        }
        products.forEach(product => {
            productsGrid.appendChild(createProductElement(product));
        });
    }

    // Fungsi untuk mengisi opsi filter kategori
    function populateFilter() {
        const categories = [...new Set(allProducts.map(p => p.category).filter(Boolean))];
        categoryFilter.innerHTML = '<option value="all">Semua Kategori</option>';
        categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category;
            categoryFilter.appendChild(option);
        });
    }

    // Fungsi untuk memfilter produk berdasarkan pencarian dan kategori
    function filterAndRender() {
        let filtered = [...allProducts];
        const searchTerm = searchInput.value.toLowerCase();
        const selectedCategory = categoryFilter.value;

        if (searchTerm) {
            filtered = filtered.filter(p => p.name.toLowerCase().includes(searchTerm));
        }
        if (selectedCategory !== 'all') {
            filtered = filtered.filter(p => p.category === selectedCategory);
        }
        renderProducts(filtered);
    }
    
    // ==================== LOGIKA KERANJANG BELANJA (CART) ====================
    function addToCart(productId) {
        const productToAdd = allProducts.find(p => p.id === productId);
        if (!productToAdd || productToAdd.stock <= 0) return;

        const existingItem = cart.find(item => item.id === productId);
        if (existingItem) {
            existingItem.quantity++;
        } else {
            cart.push({ ...productToAdd, quantity: 1 });
        }
        updateCart();
    }

    function updateCart() {
        renderCartItems();
        updateCartCounter();
        updateCartTotal();
        updateOrderForm();
    }

    function renderCartItems() {
        if (cart.length === 0) {
            cartItemsContainer.innerHTML = '<p class="cart-empty-msg">Keranjang Anda masih kosong.</p>';
            if(checkoutBtn) checkoutBtn.style.display = 'none';
            return;
        }
        if(checkoutBtn) checkoutBtn.style.display = 'block';
        cartItemsContainer.innerHTML = '';
        cart.forEach(item => {
            const imageSrc = item.image ? `${SERVER_URL}/${item.image}` : 'images/default.png';
            const cartItemHTML = `<div class="cart-item"><img src="${imageSrc}" alt="${item.name}" class="cart-item-img"><div class="cart-item-details"><p class="cart-item-name">${item.name}</p><p class="cart-item-price">Rp ${item.price.toLocaleString('id-ID')}</p></div><div class="cart-item-quantity"><button class="quantity-change" data-id="${item.id}" data-change="-1">-</button><span>${item.quantity}</span><button class="quantity-change" data-id="${item.id}" data-change="1">+</button></div><button class="remove-item" data-id="${item.id}">&times;</button></div>`;
            cartItemsContainer.innerHTML += cartItemHTML;
        });
    }

    function updateCartCounter() {
        const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
        if(cartCount) cartCount.textContent = totalItems;
    }

    function updateCartTotal() {
        const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        if(cartTotalPriceEl) cartTotalPriceEl.textContent = `Rp ${total.toLocaleString('id-ID')}`;
    }
    
    function changeQuantity(productId, change) {
        const item = cart.find(i => i.id === productId);
        if (!item) return;
        
        item.quantity += change;
        
        if (item.quantity <= 0) {
            cart = cart.filter(i => i.id !== productId);
        }
        updateCart();
    }
    
    // ==================== LOGIKA FORM WHATSAPP ====================
    function updateOrderForm() {
        if (!orderItemsTextarea || !orderTotalInput) return;
        const itemsText = cart.map(item => `- ${item.name} (x${item.quantity})`).join('\n');
        const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        
        orderItemsTextarea.value = itemsText;
        orderTotalInput.value = `Rp ${total.toLocaleString('id-ID')}`;
    }
    
    function handleOrderSubmit(e) {
        e.preventDefault();
        const name = document.getElementById('customerName').value;
        const phone = document.getElementById('customerPhone').value;
        const address = document.getElementById('customerAddress').value;
        
        if (cart.length === 0) {
            alert('Keranjang Anda kosong. Silakan pilih produk terlebih dahulu.');
            return;
        }

        const items = orderItemsTextarea.value;
        const total = orderTotalInput.value;
        const adminPhone = '6283114925705';

        const message = `Halo SembakoModern, saya ingin memesan:\n\n*Pesanan:*\n${items}\n\n*Total: ${total}*\n\n*Data Pemesan:*\nNama: ${name}\nNo. HP/WA: ${phone}\nAlamat Pengiriman: ${address}\n\nTerima kasih.`;
        
        const whatsappURL = `https://wa.me/${adminPhone}?text=${encodeURIComponent(message)}`;
        window.open(whatsappURL, '_blank');
    }

    // ==================== EVENT LISTENERS ====================
    if(productsGrid) {
        productsGrid.addEventListener('click', (e) => {
            if (e.target.classList.contains('add-to-cart-btn')) {
                const productId = parseInt(e.target.dataset.id);
                addToCart(productId);
            }
        });
    }

    if (cartBtn) cartBtn.addEventListener('click', () => cartModalOverlay.classList.add('active'));
    if (closeCartBtn) closeCartBtn.addEventListener('click', () => cartModalOverlay.classList.remove('active'));
    if (cartModalOverlay) cartModalOverlay.addEventListener('click', (e) => {
        if (e.target === cartModalOverlay) cartModalOverlay.classList.remove('active');
    });
    
    if (cartItemsContainer) cartItemsContainer.addEventListener('click', (e) => {
        const target = e.target;
        if (target.dataset.id) {
            const productId = parseInt(target.dataset.id);
            if (target.classList.contains('quantity-change')) {
                const change = parseInt(target.dataset.change);
                changeQuantity(productId, change);
            }
            if (target.classList.contains('remove-item')) {
                cart = cart.filter(item => item.id !== productId);
                updateCart();
            }
        }
    });
    
    if (checkoutBtn) checkoutBtn.addEventListener('click', (e) => {
        e.preventDefault();
        cartModalOverlay.classList.remove('active');
        document.getElementById('order-form-section').scrollIntoView({ behavior: 'smooth' });
    });
    
    if (orderForm) orderForm.addEventListener('submit', handleOrderSubmit);
    if(searchInput) searchInput.addEventListener('input', filterAndRender);
    if(categoryFilter) categoryFilter.addEventListener('change', filterAndRender);
    
    // ==================== INISIALISASI ====================
    async function init() {
        if (productsGrid) {
            try {
                const response = await fetch(API_URL);
                if (!response.ok) throw new Error('Server tidak merespon.');
                allProducts = await response.json();
                populateFilter();
                renderProducts(allProducts);
            } catch (error) {
                productsGrid.innerHTML = `<p style="color: red; grid-column: 1 / -1; text-align: center;">Gagal memuat produk. Pastikan server backend berjalan.</p>`;
            }
        }
    }
    
    init();
});